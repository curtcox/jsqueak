#!/usr/bin/gawk -f
#
# Rewrite the interpreter source in $1 to use GNU C extensions, writing the
# modified file to stdout.  Author: Ian.Piumarta@inria.fr
#
# Last edited: Tue Dec  2 18:48:12 1997 by piumarta (Ian Piumarta) on pingu

BEGIN {
  print "/* This file has been post-processed for GNU C */\n\
\n\
";
  print "copying first section of file" > "/dev/stderr";
  stage= 0;
}

/#include "sq.h"/ {
  print "#include \"sqGnu.h\"\n";
  next;
}

# A prototype for internalPush means the interprer was not inlined

/^int internalPush\(/ \
{
  print "" > "/dev/stderr";
  print "*** interpreter was not inlined: bailing out! ***" > "/dev/stderr";
  print "" > "/dev/stderr";
  exit 1;
}


# At every stage rewrite "if (0)" or "if (1)" as "if (TRANSLATED)"

/if \(0\)/ { gsub("\\(0\\)", "(TRANSLATED)"); print; next; }
/if \(1\)/ { gsub("\\(1\\)", "(TRANSLATED)"); print; next; }


(stage == 0) && /^int interpret\(void\) \{/ {
  print "interpret: adding static register assignments" > "/dev/stderr";
  stage= 1;
  print;
  next;
}

(stage == 1) && /^    char \* localIP;/ {
  print "    char * localIP IP_REG;";
  next;
}

(stage == 1) && /^    char \* localSP;/ {
  print "    char * localSP SP_REG;";
  next;
}

(stage == 1) && /^    int currentBytecode;/ {
# print "    unsigned char currentBytecode CB_REG;" */
  print "    int currentBytecode CB_REG;";
  next;
}

(stage == 1) && /^$/ {
  print "interpret: adding bytecode dispatch table" > "/dev/stderr";
  print "    JUMP_TABLE;\n";
  print "interpret: rewriting case labels and outer breaks" > "/dev/stderr";
  stage= 2;
  FS="[ 	:]+";
  next;
}

(stage == 2) && /^		case / {
  print "		CASE(" $3 ")";
  next;
}

(stage == 2) && /^			break;/ {
  print "			BREAK;";
  next;
}

(stage == 2) && /^\}/ {
  stage= 3;
  print;
  next;
}

(stage == 3) && /^int primitiveResponse\(/ {
  print;
  print "primitiveResponse: adding primitive dispatch table" > "/dev/stderr";
  print "    PRIM_TABLE;\n";
  print "primitiveResponse: rewriting case labels" > "/dev/stderr";
  stage= 4;
  FS="[ 	:]+";
  next;
}


(stage == 4) && /^	switch \(primitiveIndex\) {/ {
  print "	PRIM_DISPATCH;";
  print;
  next;
}

(stage == 4) && /^	case / {
  print "	CASE(" $3 ")";
  next;
}

(stage == 4) && /^\}/ {
  print "copying last section of file" > "/dev/stderr";
  stage= 5;
  FS=" ";
  print;
  next;
}

# default
{
  print;
  next;
}
